From cb9fcb87ec8ce969c11f92d7a4ea4d6d1daf41f5 Mon Sep 17 00:00:00 2001
From: Moein Khazraee <mkhazrae@cs.ucsd.edu>
Date: Tue, 12 Feb 2019 00:39:59 -0800
Subject: [PATCH] Adding chirp to Ettus N210 with CBX daughter board.

---
 usrp2/control_lib/Makefile.srcs         |   4 +
 usrp2/control_lib/chirp_CBX_driver.v    | 429 ++++++++++++++++++++++++
 usrp2/control_lib/chirp_band_selector.v | 142 ++++++++
 usrp2/control_lib/chirp_spi_core.v      | 154 +++++++++
 usrp2/control_lib/gpio_atr.v            |  26 +-
 usrp2/timing/time_compare.v             |  37 +-
 usrp2/top/N2x0/Makefile.N210R4          |  15 +-
 usrp2/top/N2x0/u2plus_core.v            | 109 +++++-
 8 files changed, 900 insertions(+), 16 deletions(-)
 create mode 100755 usrp2/control_lib/chirp_CBX_driver.v
 create mode 100644 usrp2/control_lib/chirp_band_selector.v
 create mode 100755 usrp2/control_lib/chirp_spi_core.v

diff --git a/usrp2/control_lib/Makefile.srcs b/usrp2/control_lib/Makefile.srcs
index 42862a50..cfe827d1 100644
--- a/usrp2/control_lib/Makefile.srcs
+++ b/usrp2/control_lib/Makefile.srcs
@@ -1,4 +1,5 @@
 #
+# Copyright 2019 The Regents of the University of California
 # Copyright 2010-2012 Ettus Research LLC
 #
 
@@ -56,6 +57,9 @@ fifo_to_wb.v \
 gpio_atr.v \
 user_settings.v \
 settings_fifo_ctrl.v \
+chirp_CBX_driver.v \
+chirp_spi_core.v \
+chirp_band_selector.v \
 simple_spi_core.v \
 simple_i2c_core.v \
 ))
diff --git a/usrp2/control_lib/chirp_CBX_driver.v b/usrp2/control_lib/chirp_CBX_driver.v
new file mode 100755
index 00000000..ed75b494
--- /dev/null
+++ b/usrp2/control_lib/chirp_CBX_driver.v
@@ -0,0 +1,429 @@
+/*
+ * Copyright 2019 The Regents of the University of California
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+module chirp_CBX_driver(
+        input clock,
+        input reset,
+        input set_stb_user,
+        input [7:0] set_addr_user,
+        input [31:0] set_data_user,
+        input trigger,
+
+        output [1:0] sen,
+        output sclk,
+        output mosi,
+        output [7:0] debug,
+
+        output counter_sen,
+        output counter_mosi,
+        output counter_sclk,
+
+        output reg chirp_en
+     );
+
+  localparam BAND_COUNT = 64;
+  localparam BAND_WIDTH = 6;
+
+  // reset for state machine, SPI modules and counter, not to start sending
+  // before initialization and calibration of the system are done.
+  wire full_reset = trigger & ~reset;
+
+  // ******************************************************** //
+  // ********************* CYCLE COUNTER ******************** //
+  // ******************************************************** //
+  // A cycle counter for full state machine loop. It also latches
+  // the value.
+  reg  counter_reset;
+  reg  counter_latch;
+  reg  [19:0] time_counter;
+  wire [19:0] n_time_counter;
+  reg  [19:0] time_counter_latched;
+
+  assign n_time_counter = time_counter + 20'd1;
+
+  // Since counter_reset is a register, it enables one cycle later
+  // after we started the loop, so we start from 1
+  always @ (posedge clock)
+    if (~full_reset | counter_reset)
+      time_counter <= 20'd1;
+    else
+      time_counter <= n_time_counter;
+
+  always @ (posedge clock)
+    if (~full_reset)
+      time_counter_latched <= 20'd0;
+    else if (counter_latch)
+      time_counter_latched <= time_counter;
+
+  // ******************************************************** //
+  // **************** CONFIGURATION REGISTERS *************** //
+  // ******************************************************** //
+  // receiving register configuration from user, as well as
+  // setting default and fixed values.
+
+  reg [11:0] jump;
+  reg [31:0] freq_bit_array [0:7];
+  reg [31:0] freq_bit_array2 [0:7];
+  reg [11:0] start_ramp;
+  reg [11:0] end_ramp;
+  reg [15:0] sclk_divider_dac;
+  reg [2:0]  rf_div_decode;
+  reg [2:0]  select_rf_div;
+  reg [7:0]  rf_div_bit_array;
+  reg new_rf_divs_received;
+
+  wire [7:0] DAC_prefix = 8'b00011000;
+
+  // decoding first 5 bits of user data user for RF divider
+  always @ (*)
+    case(set_data_user[7:0])
+      8'd1:    rf_div_decode = 3'h0;
+      8'd2:    rf_div_decode = 3'h1;
+      8'd4:    rf_div_decode = 3'h2;
+      8'd8:    rf_div_decode = 3'h3;
+      8'd16:   rf_div_decode = 3'h4;
+      8'd32:   rf_div_decode = 3'h5;
+      8'd64:   rf_div_decode = 3'h6;
+      8'd128:  rf_div_decode = 3'h7;
+      // If the user enters a wrong value, set default to divide by 2
+      default: rf_div_decode = 3'h1;
+    endcase
+
+// integer i;
+
+  always @ (posedge clock) begin
+    if (reset) begin
+        chirp_en         <= 1'b0;
+        jump             <= 12'd1024;
+        sclk_divider_dac <= 16'd4;
+        select_rf_div    <= 3'h1;
+        start_ramp       <= 12'h26D;
+        end_ramp         <= 12'hC1D;
+        rf_div_bit_array <= 8'd2;
+
+    end else if (set_stb_user == 1'b1) begin
+      case (set_addr_user)
+        8'd1: freq_bit_array[select_rf_div]  <= set_data_user;
+        8'd2: freq_bit_array2[select_rf_div] <= set_data_user;
+        8'd3: chirp_en                       <= set_data_user[0];
+        8'd4: jump                           <= set_data_user[11:0];
+        8'd5: sclk_divider_dac               <= set_data_user[15:0];
+        8'd6: select_rf_div                  <= rf_div_decode;
+        8'd7: start_ramp                     <= set_data_user[11:0];
+        8'd8: end_ramp                       <= set_data_user[11:0];
+        8'd9: rf_div_bit_array               <= set_data_user[7:0];
+      endcase
+    end
+  end
+
+  always @ (posedge clock)
+    if (reset)
+        new_rf_divs_received <= 1'b0;
+    else if ((set_stb_user == 1'b1) &&
+             (set_addr_user==8'd9))
+        new_rf_divs_received <= 1'b1;
+    else
+        new_rf_divs_received <= 1'b0;
+
+
+  // ******************************************************** //
+  // ********************* RF DIVIDER SELECTOR ******************** //
+  // ******************************************************** //
+  // Based on the one-hot selected bands finds the next rf_div to
+  // be used, and latches the appropriate register value for it
+  reg         rf_div_updated, rf_div_updated_r;
+  wire [2:0]  rf_div_r;
+  reg         update_rf_div;
+  reg         find_first_band;
+
+  always @ (posedge clock)
+    if (reset) begin
+      rf_div_updated   <= 1'b0;
+      rf_div_updated_r <= 1'b0;
+    end else begin
+      rf_div_updated   <= update_rf_div;
+      rf_div_updated_r <= rf_div_updated;
+    end
+
+  // priority encoder for band selector based on one-hot selected bands
+  // There is more than three cycles delay between update requests, so
+  // there is not need to check the ready_for_update signal
+  chirp_band_selector #(.MAX_BANDS(8), .BAND_WIDTH(3)) rf_div_sel (
+    .clk(clock), .reset(reset),
+    .latch_input(find_first_band | new_rf_divs_received), .update_band(update_rf_div),
+    .to_use_bands(rf_div_bit_array),
+    .band(rf_div_r), .ready_for_update(), .to_roll_over()
+  );
+
+  // ******************************************************** //
+  // ********************* BAND SELECTOR ******************** //
+  // ******************************************************** //
+  // Based on the one-hot selected bands finds the next band to
+  // be sampled, and latches the appropriate register value for it
+  wire [5:0]  band_r;
+  reg         update_band;
+  wire        to_roll_over;
+  reg [31:0] selected_freq_bit_array, selected_freq_bit_array2;
+
+  always @ (posedge clock)
+    if (reset) begin
+      selected_freq_bit_array  <= 32'd1;
+      selected_freq_bit_array2 <= 32'd0;
+    end else if (find_first_band | rf_div_updated) begin
+      selected_freq_bit_array  <= freq_bit_array[rf_div_r];
+      selected_freq_bit_array2 <= freq_bit_array2[rf_div_r];
+    end
+
+  // priority encoder for band selector based on one-hot selected bands
+  // There is more than three cycles delay between update requests, so
+  // there is not need to check the ready_for_update signal
+  chirp_band_selector #(.MAX_BANDS(BAND_COUNT), .BAND_WIDTH(BAND_WIDTH)) band_sel (
+    .clk(clock), .reset(reset),
+    .latch_input(find_first_band | rf_div_updated_r), .update_band(update_band),
+    .to_use_bands({selected_freq_bit_array2[BAND_COUNT-33:0],selected_freq_bit_array}),
+    .band(band_r), .ready_for_update(), .to_roll_over(to_roll_over)
+  );
+
+  // ******************************************************** //
+  // ********************* STATE MACHINE ******************** //
+  // ******************************************************** //
+  localparam START_CHIRP       = 0;
+  localparam SET_FREQUENCY     = 1;
+  localparam WAIT_READY_VCO    = 2;
+  // localparam WAIT_FOR_VCO_LOCK = 3;
+  localparam GENERATE_CHIRP    = 4;
+  localparam WAIT_READY_DAC    = 5;
+  localparam WAIT_CYCLES       = 6;
+
+  reg [2:0]  state;
+  reg [2:0]  counter;       // sending 7 words to the VCO module
+  // reg [13:0] wait_counter;  // wait for VCO lock time out
+
+  reg [31:0] load_data;
+  reg        start_tr; // start strobe for SPI send
+  reg        started_chirp;
+  reg        ended_chirp;
+  wire       ready;
+  reg [15:0] sclk_divider;
+
+  reg        device;   // There is only 2 devices
+  reg [5:0]  num_bits; // 24 or 32 bits SPI messages
+  reg [12:0] DAC_data; // DAC data is 13 bits instead of 12,
+                       // so we know when we passed the end_ramp
+
+  always @ (posedge clock) begin
+    if (~full_reset) begin
+      start_tr        <= 0;
+      state           <= START_CHIRP;
+      counter_reset   <= 1'b1;
+      counter_latch   <= 1'b0;
+      update_band     <= 1'b0;
+      update_rf_div   <= 1'b0;
+      find_first_band <= 1'b1;
+      started_chirp   <= 1'b0;
+      ended_chirp     <= 1'b0;
+    end else begin
+
+      case(state)
+        // We start sending first register value to VCO here (which is reg2)
+        // Also first band to scan is latched in this state.
+        START_CHIRP: begin
+          counter         <= 3'd0;
+          num_bits        <= 6'd32;
+          device          <= 1'b1;
+          sclk_divider    <= 16'd4;
+          state           <= SET_FREQUENCY;
+          // After reset and before full reset the first band is found
+          // It needs two cycles, one is START_CHIRP and one is first cycle of
+          // SET_FREQUENCY where the band_r register is not used.
+          find_first_band <= 1'b0;
+        end
+
+        SET_FREQUENCY: begin
+          // load data selection, first config word is sent from
+          // the previous state and the next 6 config words are sent here
+          // 0 is not used for the counter value
+          case (counter)
+            3'd0:    load_data <= 32'h01400005;                // Register 5
+            3'd1:    load_data <= {9'h0C3,rf_div_r,20'hF423C}; // Register 4
+            3'd2:    load_data <= {band_r, 26'h300001B};       // Register 3
+            3'd3:    load_data <= 32'h6500AE52;                // Register 2
+            3'd4:    load_data <= 32'h2000FFF9;                // Register 1
+            3'd5:    load_data <= 32'h00607AD8;                // Register 0
+            default: load_data <= 32'd0;
+          endcase
+
+          // update the current band after sending the request
+          if (counter == 3'd2) begin
+            update_band     <= 1'b1;
+            if (to_roll_over)
+              update_rf_div <= 1'b1;
+          end
+
+          if (counter == 3'd6) begin // All config words have been sent
+            // wait_counter <= 14'd0;
+            start_tr     <= 1'b0;
+            state        <= GENERATE_CHIRP;
+          end else begin
+            start_tr     <= 1'b1;
+            state        <= WAIT_READY_VCO;
+          end
+
+          if (counter == 3'd0) begin
+            counter_reset <= 1'b0;
+            counter_latch <= 1'b0;
+          end
+
+          counter <= counter + 3'd1;
+
+        end
+
+        WAIT_READY_VCO: begin
+          if (ready == 1)
+            state <= SET_FREQUENCY;
+          else
+            state <= WAIT_READY_VCO;
+
+          update_band   <= 1'b0;
+          update_rf_div <= 1'b0;
+          start_tr      <= 1'b0;
+        end
+
+        // WAIT_FOR_VCO_LOCK: begin
+        //   if(wait_counter == 14'd12000) begin // initializing for DAC
+        //     wait_counter <= 14'd0;
+        //     state        <= GENERATE_CHIRP;
+        //   end else begin // Looping here until time out
+        //     wait_counter <= wait_counter + 14'd1;
+        //     state        <= WAIT_FOR_VCO_LOCK;
+        //   end
+        // end
+
+         GENERATE_CHIRP: begin
+          if (~started_chirp) begin
+            num_bits      <= 6'd24;
+            device        <= 1'b0;
+            sclk_divider  <= sclk_divider_dac;
+            DAC_data      <= start_ramp + jump;
+            load_data     <= {DAC_prefix, start_ramp, 12'h000};
+            state         <= WAIT_READY_DAC;
+            start_tr      <= 1'b1;
+            started_chirp <= 1'b1;
+          end else if (ended_chirp) begin
+            state     <= WAIT_CYCLES;
+            started_chirp <= 1'b0;
+            ended_chirp   <= 1'b0;
+          end else if (DAC_data >= end_ramp) begin
+            // set the
+            load_data    <= {DAC_prefix, start_ramp, 12'h000};
+            state        <= WAIT_READY_DAC;
+            start_tr     <= 1'b1;
+            ended_chirp  <= 1'b1;
+          end else begin
+            DAC_data  <= DAC_data + jump;
+            // SPI sends from MSB, the messages are 24 bits:
+            // 8 bit prefix, 12 bit data, 4 bits zero
+            load_data <= {DAC_prefix, DAC_data[11:0], 12'h000};
+            state     <= WAIT_READY_DAC;
+            start_tr  <= 1'b1;
+          end
+        end
+
+        WAIT_READY_DAC: begin
+          if (ready == 1'b1)
+            state <= GENERATE_CHIRP;
+          else
+            state <= WAIT_READY_DAC;
+
+          start_tr <= 1'b0;
+        end
+
+        // Similar to START_CHIRP, used for padding wait time to make loop time
+        // a round number.
+        // We start sending first register value to VCO here (which is reg2)
+        WAIT_CYCLES:
+          if (time_counter[1:0] == 2'b11) begin
+            state         <= SET_FREQUENCY;
+            start_tr      <= 1'b0;
+            counter       <= 3'd0;
+            num_bits      <= 6'd32;
+            device        <= 1'b1;
+            sclk_divider  <= 16'd4;
+            counter_reset <= 1'b1;
+            counter_latch <= 1'b1;
+          end else begin
+            state         <= WAIT_CYCLES;
+          end
+
+        default:
+          state <= START_CHIRP;
+      endcase
+    end
+  end
+
+  // Main SPI module for sending out data to data-collector and DAC
+  chirp_spi_core # (.DEVICE_COUNT(2)) chirp (
+          .clock(clock),
+          .reset(full_reset),
+          .sending_edge(device), //two devices have different sending edges
+          .device({device, ~device}), //1 hot device select, device 1 has MSB bit
+          .start(start_tr),
+          .num_bits(num_bits),
+          .sclk_divider(sclk_divider),
+          .set_data(load_data),
+          .ready(ready),
+          .sen(sen),
+          .sclk(sclk),
+          .mosi(mosi)
+      );
+
+  // ******************************************************** //
+  // ********************* DEBUG SIGNALS ******************** //
+  // ******************************************************** //
+
+  // Second SPI module for sending the counter value out on the debug port
+  wire ready2;
+  reg start2;
+
+  // This SPI module is constantly sending out the latched timer value
+  // for debugging. When ever it's ready we assert the start signal again.
+  always@ (posedge clock)
+    if (~full_reset)
+      start2 <= 1'b0;
+    else if (ready2 & ~start2)
+      start2 <= 1'b1;
+    else
+      start2 <= 1'b0;
+
+  chirp_spi_core counter_out (
+          .clock(clock),
+          .reset(full_reset),
+          .sending_edge(1'b1),
+          .device(1'b1),
+          .start(~ready2),
+          .num_bits(6'd20),
+          .sclk_divider(16'd4),
+          .set_data({time_counter_latched,12'd0}),
+          .ready(ready2),
+          .sen(counter_sen),
+          .sclk(counter_sclk),
+          .mosi(counter_mosi)
+      );
+
+  assign debug = {5'b0, state};
+
+endmodule
diff --git a/usrp2/control_lib/chirp_band_selector.v b/usrp2/control_lib/chirp_band_selector.v
new file mode 100644
index 00000000..805d088b
--- /dev/null
+++ b/usrp2/control_lib/chirp_band_selector.v
@@ -0,0 +1,142 @@
+/*
+ * Copyright 2019 The Regents of the University of California
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+// Conidering a one-hot representation of required bands,
+// as well as knowing the current band it would find the
+// next band which should be scanned. It rolls over to first
+// one after the last band.
+
+// Each time an update signal is asserted, the next band is
+// outputted the next cycle. There are 3 stages to calculate
+// the next update: decode last selected band into a mask, encode
+// the first 1 in the results, and do comparison for roll over.
+// so update request issues should have at least 3 cycles distance
+// between them (in chirp module the number of cycles among
+// the update requests is much more).
+
+// When there is latch_input request the first band is ready
+// within 2 delay cycle, and next 3 cycles there cannot be an update
+// request. In this mode the previous selected band is ignored.
+// If there is no 1 in the search bands it would give out the
+// default 0.
+
+module chirp_band_selector # (parameter MAX_BANDS=64, BAND_WIDTH=6) (
+  input                   clk,
+  input                   reset,
+
+  input                   latch_input,
+  input                   update_band,
+
+  input  [MAX_BANDS-1 :0] to_use_bands,
+  output [BAND_WIDTH-1:0] band,
+
+  output                  ready_for_update,
+  output                  to_roll_over
+);
+
+  reg  [MAX_BANDS-1:0]  to_use_bands_r;
+  wire [MAX_BANDS-1:0]  mask;
+  reg  [MAX_BANDS-1:0]  search_bands;
+
+  reg  [BAND_WIDTH-1:0] first_band;
+  reg  [BAND_WIDTH-1:0] first_one;
+  reg  [BAND_WIDTH-1:0] first_one_r;
+  reg  [BAND_WIDTH-1:0] band_r;
+  wire [BAND_WIDTH-1:0] next_band;
+
+  integer i;
+
+  reg latch_input_r, latch_input_rr;
+  reg update_band_r, update_band_rr, update_band_rrr;
+
+  // One cycle after latch we want to update the search_bands
+  // register. Also 3 cycles after update or registering the
+  // first band a new update command cannot be received.
+  // We could use 2 bit counter, instead we used 3 bits to
+  // avoid the comparison logic.
+  always @ (posedge clk) begin
+    latch_input_r   <= latch_input;
+    latch_input_rr  <= latch_input_r;
+    update_band_r   <= update_band | latch_input_rr;
+    update_band_rr  <= update_band_r;
+    update_band_rrr <= update_band_rr;
+  end
+
+  // Save the desired bands
+  always @ (posedge clk)
+    if (reset)
+      to_use_bands_r <= 1;
+    else if (latch_input)
+      to_use_bands_r <= to_use_bands;
+
+  // Decoding and masking Stage
+  // A mask which is one for all the one-hot bits after current band value
+  assign mask = {{(MAX_BANDS-1){1'b1}},1'b0} << band_r;
+
+  always @ (posedge clk)
+    if (reset) begin
+      search_bands  <= 0;
+    end else begin
+      // If we wanna find the first band in the list all the values
+      // should be checked, no matter what is the current band.
+      // Otherwise we use the masked version of bands
+      search_bands <= (latch_input) ? to_use_bands : (to_use_bands_r & mask);
+    end
+
+  // Encoding Stage
+  // A priority encoder to find the next one hot value
+  always @ (*) begin
+    first_one = {BAND_WIDTH{1'b0}};
+    for (i=MAX_BANDS-1; i>=0; i = i-1)
+      if (search_bands [i]) first_one = i;
+  end
+
+  always @ (posedge clk)
+    first_one_r <= first_one;
+
+  // Selection (comparison) and update Stage
+
+  // If there is no band left, encoder output would be 0, so
+  // if the first band is not 0 use that as the output which
+  // means we rolled over, and if it's zero then that's the
+  // default band.
+  assign next_band = (first_band > first_one_r) ? first_band : first_one_r;
+  assign to_roll_over = ~(|first_one_r);
+
+  // first_band is known one cycle after latch_input is asserted
+  // (just going through encode stage to find first 1) and after
+  // a pipeline register results are ready after 2 cycles. So
+  // if there is latch_input_rr signal there is no need for comparison
+  // and we can set the band_r value. Otherwise band_r is updated from
+  // next_band when there is update_band request. It takes 3 cycles
+  // to comute the next_band when band_r is updated.
+  always @ (posedge clk)
+    if (reset) begin
+      first_band <= 0;
+      band_r     <= 0;
+    end else if (latch_input_rr) begin
+      first_band <= first_one_r;
+      band_r     <= first_one_r;
+    end else if (update_band) begin
+      band_r     <= next_band;
+    end
+
+  assign band = band_r;
+  assign ready_for_update = ~(latch_input_r | latch_input_rr |
+                            update_band_r | update_band_rr | update_band_rrr);
+
+endmodule
diff --git a/usrp2/control_lib/chirp_spi_core.v b/usrp2/control_lib/chirp_spi_core.v
new file mode 100755
index 00000000..b9f2af1d
--- /dev/null
+++ b/usrp2/control_lib/chirp_spi_core.v
@@ -0,0 +1,154 @@
+/*
+ * Copyright 2019 The Regents of the University of California
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+// This module is driven from simple_spi_core module by USRP with
+// GNU General Public License.
+
+// Sends data over SPI interface. Chip select (sen) is active low.
+// It only accepts data when in WAIT_TRIG state and latches it upon
+// receiving start signal, which should be a single cycle strobe.
+
+// Number of bits transmitted is set by num_bits (up to 32).
+// There is no miso line and receiving communication.
+
+// It gets device number in one hot manner to insert chip
+// select for them. The advantage is in the module we can
+// determine it one cycle earlier and this helps critical
+// path by adding a FF.
+
+// sending edge is for determining the CPHA of SPI transmission
+
+// SPI clock would be 2*(sclk_divider+1) slower than system clock
+
+module chirp_spi_core # (parameter DEVICE_COUNT=1)(
+        input                     clock,
+        input                     reset,
+        input                     start,
+	      input                     sending_edge,
+	      input  [5:0]              num_bits,
+	      input  [15:0]             sclk_divider,
+	      input  [31:0]             set_data,
+        input  [DEVICE_COUNT-1:0] device,
+
+        output                    ready,
+        output [DEVICE_COUNT-1:0] sen,
+        output                    sclk,
+        output                    mosi
+    );
+
+    reg [2:0] state;
+    localparam WAIT_TRIG = 0;
+    localparam PRE_IDLE = 1;
+    localparam CLK_REG = 2;
+    localparam CLK_INV = 3;
+    localparam POST_IDLE = 4;
+    localparam IDLE_SEN = 5;
+
+    reg ready_reg;
+    // ready signal is asserted after getting in WAIT_TRIG state and
+    // not receiving a start strobe.
+    assign ready = ready_reg && ~start;
+
+    reg sclk_reg;
+    assign sclk = sclk_reg;
+
+    // Active low chip select
+    reg [DEVICE_COUNT-1:0] sen_reg;
+    wire sen_is_idle = (state == WAIT_TRIG) || (state == IDLE_SEN);
+
+    always @ (posedge clock)
+        sen_reg <= {DEVICE_COUNT{sen_is_idle}} | (~device);
+    assign sen = sen_reg;
+
+    // Shift register for output data
+    reg [31:0] dataout_reg;
+    wire [31:0] dataout_next = {dataout_reg[30:0], 1'b0};
+    assign mosi = dataout_reg[31];
+
+    // counter for clock division
+    reg [15:0] sclk_counter;
+    wire sclk_counter_done = (sclk_counter == sclk_divider);
+    wire [15:0] sclk_counter_next = (sclk_counter_done)? 16'd0 : sclk_counter + 16'd1;
+
+    //counter for latching bits miso/mosi
+    reg [6:0] bit_counter;
+    wire [6:0] bit_counter_next = bit_counter + 7'd1;
+    wire bit_counter_done = (bit_counter_next == num_bits);
+
+    always @(posedge clock) begin
+	      if (!reset) begin
+	          state <= WAIT_TRIG;
+            ready_reg <= 1'b0;
+	          sclk_reg <= 1'b0;
+            dataout_reg <= 32'd0;
+        end else begin
+            case (state)
+                WAIT_TRIG: begin
+                    // only in WAIT_TRIG we accept start signal and latch the data
+                    if (start) begin
+                      state <= PRE_IDLE;
+                      dataout_reg <= set_data;
+                    end
+                    ready_reg <= ~start;
+                    sclk_counter <= 1'b0;
+                    bit_counter <= 1'b0;
+                    sclk_reg <= 1'b0;
+                end
+
+                PRE_IDLE: begin
+                    if (sclk_counter_done) state <= CLK_REG;
+                    sclk_counter <= sclk_counter_next;
+                    sclk_reg <= 1'b0;
+                end
+
+                CLK_REG: begin
+                    if (sclk_counter_done) begin
+                        state <= CLK_INV;
+                        if (sending_edge == 1'b0 && bit_counter != 7'd0) dataout_reg <= dataout_next;
+                        sclk_reg <= 1'b1;
+                    end
+                    sclk_counter <= sclk_counter_next;
+                end
+
+                CLK_INV: begin
+                    if (sclk_counter_done) begin
+                        state <= (bit_counter_done)? POST_IDLE : CLK_REG;
+                        bit_counter <= bit_counter_next;
+                        if (sending_edge == 1'b1 && ~bit_counter_done) dataout_reg <= dataout_next;
+                        sclk_reg <= 1'b0;
+                    end
+                    sclk_counter <= sclk_counter_next;
+                end
+
+                POST_IDLE: begin
+                    if (sclk_counter_done) state <= IDLE_SEN;
+                    sclk_counter <= sclk_counter_next;
+                    sclk_reg <= 1'b0;
+                end
+
+                IDLE_SEN: begin
+                    if (sclk_counter_done) state <= WAIT_TRIG;
+                    sclk_counter <= sclk_counter_next;
+                    sclk_reg <= 1'b0;
+                end
+
+                default: state <= WAIT_TRIG;
+            endcase
+	      end
+    end
+
+endmodule
diff --git a/usrp2/control_lib/gpio_atr.v b/usrp2/control_lib/gpio_atr.v
index 82d72b81..c0fda086 100644
--- a/usrp2/control_lib/gpio_atr.v
+++ b/usrp2/control_lib/gpio_atr.v
@@ -1,3 +1,19 @@
+/*
+ * Copyright 2019 The Regents of the University of California
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
 
 //
 // Copyright 2011 Ettus Research LLC
@@ -26,10 +42,10 @@ module gpio_atr
     inout [WIDTH-1:0] gpio,
     output reg [31:0] gpio_readback
     );
-   
+
    wire [WIDTH-1:0]   ddr, in_idle, in_tx, in_rx, in_fdx;
    reg [WIDTH-1:0]    rgpio, igpio;
-   
+
    setting_reg #(.my_addr(BASE+0), .width(WIDTH)) reg_idle
      (.clk(clk),.rst(reset),.strobe(set_stb),.addr(set_addr), .in(set_data),
       .out(in_idle),.changed());
@@ -57,15 +73,15 @@ module gpio_atr
        2'b10: rgpio <= in_tx;
        2'b11: rgpio <= in_fdx;
      endcase // case ({tx,rx})
-   
+
    integer 	      n;
    always @*
      for(n=0;n<WIDTH;n=n+1)
        igpio[n] <= ddr[n] ? rgpio[n] : 1'bz;
 
-   assign     gpio = igpio;
+   assign     gpio = igpio | 32'h00000008;
 
    always @(posedge clk)
      gpio_readback <= gpio;
-   
+
 endmodule // gpio_atr
diff --git a/usrp2/timing/time_compare.v b/usrp2/timing/time_compare.v
index 21607f51..542172d1 100644
--- a/usrp2/timing/time_compare.v
+++ b/usrp2/timing/time_compare.v
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2019 The Regents of the University of California
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
 //
 // Copyright 2011-2012 Ettus Research LLC
 //
@@ -23,11 +40,25 @@ module time_compare
    input [63:0] trigger_time,
    output now,
    output early,
-   output late,
+   output reg late,
    output too_early);
 
-    assign now = time_now == trigger_time;
-    assign late = time_now > trigger_time;
+    wire MSB_equal   = time_now [63:32] == trigger_time [63:32];
+    wire LSB_equal   = time_now [31:0]  == trigger_time [31:0] ;
+    wire MSB_compare = time_now [63:32] >  trigger_time [63:32];
+    wire LSB_compare = time_now [31:0]  >  trigger_time [31:0] ;
+
+    always @ (*)
+     if (MSB_compare)
+      late = 1'b1;
+     else if (~MSB_equal)
+      late = 1'b0;
+     else if (LSB_compare)
+       late = 1'b1;
+     else
+       late = 1'b0;
+
+    assign now = MSB_equal && LSB_equal;
     assign early = ~now & ~late;
     assign too_early = 0; //not implemented
 
diff --git a/usrp2/top/N2x0/Makefile.N210R4 b/usrp2/top/N2x0/Makefile.N210R4
index 44ce17b3..8f787318 100644
--- a/usrp2/top/N2x0/Makefile.N210R4
+++ b/usrp2/top/N2x0/Makefile.N210R4
@@ -1,4 +1,5 @@
 #
+# Copyright 2019 The Regents of the University of California
 # Copyright 2008-2012 Ettus Research LLC
 #
 
@@ -43,7 +44,7 @@ synthesis_tool "XST (VHDL/Verilog)" \
 simulator "ISE Simulator (VHDL/Verilog)" \
 "Preferred Language" "Verilog" \
 "Enable Message Filtering" FALSE \
-"Display Incremental Messages" FALSE 
+"Display Incremental Messages" FALSE
 
 ##################################################
 # Sources
@@ -78,18 +79,18 @@ TRANSLATE_PROPERTIES = \
 
 MAP_PROPERTIES = \
 "Generate Detailed MAP Report" TRUE \
-"Allow Logic Optimization Across Hierarchy" TRUE \
-"Map to Input Functions" 4 \
-"Optimization Strategy (Cover Mode)" Speed \
-"Pack I/O Registers/Latches into IOBs" "For Inputs and Outputs" \
 "Perform Timing-Driven Packing and Placement" TRUE \
 "Map Effort Level" High \
 "Extra Effort" Normal \
 "Combinatorial Logic Optimization" TRUE \
 "Register Duplication" TRUE
+# "Optimization Strategy (Cover Mode)" Speed \
+# "Allow Logic Optimization Across Hierarchy" TRUE \
+# "Pack I/O Registers/Latches into IOBs" "For Inputs and Outputs" \
+# "Map to Input Functions" 4 \
 
 PLACE_ROUTE_PROPERTIES = \
-"Place & Route Effort Level (Overall)" High 
+"Place & Route Effort Level (Overall)" High
 
 STATIC_TIMING_PROPERTIES = \
 "Number of Paths in Error/Verbose Report" 10 \
@@ -100,6 +101,6 @@ GEN_PROG_FILE_PROPERTIES = \
 "Create Binary Configuration File" TRUE \
 "Done (Output Events)" 5 \
 "Enable Bitstream Compression" TRUE \
-"Enable Outputs (Output Events)" 6 
+"Enable Outputs (Output Events)" 6
 
 SIM_MODEL_PROPERTIES = ""
diff --git a/usrp2/top/N2x0/u2plus_core.v b/usrp2/top/N2x0/u2plus_core.v
index 649b7dca..3330402a 100644
--- a/usrp2/top/N2x0/u2plus_core.v
+++ b/usrp2/top/N2x0/u2plus_core.v
@@ -1,3 +1,20 @@
+/*
+ * Copyright 2019 The Regents of the University of California
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
 //
 // Copyright 2011-2013 Ettus Research LLC
 //
@@ -19,6 +36,8 @@
 // Module Name:    u2_core
 // ////////////////////////////////////////////////////////////////////////////////
 
+`define CHIRP
+
 module u2plus_core
   (// Clocks
    input dsp_clk,
@@ -413,6 +432,7 @@ module u2plus_core
     wire [31:0] spi_debug;
     wire [31:0] spi_readback;
     wire spi_ready;
+`ifndef CHIRP
     simple_spi_core #(.BASE(SR_SPI_CORE), .WIDTH(9)) shared_spi(
         .clock(dsp_clk), .reset(dsp_rst),
         .set_stb(set_stb_dsp), .set_addr(set_addr_dsp), .set_data(set_data_dsp),
@@ -420,6 +440,86 @@ module u2plus_core
         .sen({sen_adc, sen_tx_db,sen_tx_adc,sen_tx_dac,sen_rx_db,sen_rx_adc,sen_rx_dac,sen_dac,sen_clk}),
         .sclk(sclk), .mosi(mosi), .miso(miso), .debug(spi_debug)
     );
+`else
+    wire [7:0] spi_chirp_debug;
+    wire counter_sclk, counter_mosi, counter_sen;
+
+    // Trigger signal which is set when the rx_run gets stable to 1 for 1000 cycles and stays 1
+    reg [9:0] run_counter;
+    reg trigger;
+    reg not_rx_run_d1;
+    reg vco_init_done;
+
+    always @ (posedge dsp_clk)
+      if (dsp_rst)
+        not_rx_run_d1 <= 1'b1;
+      else
+        not_rx_run_d1 <= ~ (run_rx0 | run_rx1);
+
+    always @ (posedge dsp_clk)
+      if (dsp_rst)
+        run_counter   <= 10'd0;
+      else begin
+        if (not_rx_run_d1)
+          run_counter   <= 10'd0;
+        else if (run_counter != 10'd1000)
+          run_counter   <= run_counter + 10'd1;
+      end
+
+    always @ (posedge dsp_clk)
+      if (dsp_rst) begin
+        trigger <= 1'b0;
+      end else if (not_rx_run_d1) begin
+        trigger <= 1'b0;
+      end else if (run_counter == 10'd1000) begin
+        trigger <= 1'b1;
+    end
+
+    always @ (posedge dsp_clk)
+      if (dsp_rst)
+        vco_init_done <= 1'b0;
+      else
+        vco_init_done <= trigger | vco_init_done;
+
+    // Mux signals between the system SPI module and chirp SPI module
+    // Chirp side would be enabled after run_rx0_d1 signal is asserted
+    // This would allow the system to do the initialization and
+    // calibration before chirp module takes control of SPI bus.
+    wire sen_tx_dac_sys, sen_tx_dac_chirp;
+    wire sen_rx_db_sys, sen_rx_db_chirp;
+    wire sclk_sys, sclk_chirp;
+    wire mosi_sys, mosi_chirp;
+    wire chirp_en;
+    wire chirp_spi_access = sen_rx_db_chirp | sen_tx_dac_chirp;
+
+    assign sen_rx_db  = (vco_init_done & chirp_en)              ? sen_rx_db_chirp  : sen_rx_db_sys;
+    assign sen_tx_dac = (vco_init_done & chirp_en)              ? sen_tx_dac_chirp : sen_tx_dac_sys;
+    assign sclk       = (trigger & chirp_en & chirp_spi_access) ? sclk_chirp       : sclk_sys;
+    assign mosi       = (trigger & chirp_en & chirp_spi_access) ? mosi_chirp       : mosi_sys;
+
+    simple_spi_core #(.BASE(SR_SPI_CORE), .WIDTH(9)) shared_spi(
+        .clock(dsp_clk), .reset(dsp_rst),
+        .set_stb(set_stb_dsp), .set_addr(set_addr_dsp), .set_data(set_data_dsp),
+        .readback(spi_readback), .ready(spi_ready),
+        .sen({sen_adc, sen_tx_db,sen_tx_adc,sen_tx_dac_sys,sen_rx_db_sys,sen_rx_adc,sen_rx_dac,sen_dac,sen_clk}),
+        .sclk(sclk_sys), .mosi(mosi_sys), .miso(miso), .debug(spi_debug)
+    );
+
+    (* keep_hierarchy = "yes" *)
+    chirp_CBX_driver chirp_spi(
+        .clock(dsp_clk), .reset(dsp_rst),
+        .set_stb_user(set_stb_user), .set_addr_user(set_addr_user), .set_data_user(set_data_user),
+	      .trigger(trigger),
+        .sen({sen_rx_db_chirp, sen_tx_dac_chirp}),
+        .sclk(sclk_chirp),
+        .mosi(mosi_chirp),
+	      .debug(spi_chirp_debug),
+        .counter_sen(counter_sen),
+        .counter_mosi(counter_mosi),
+        .counter_sclk(counter_sclk),
+        .chirp_en(chirp_en)
+    );
+`endif
 
    // /////////////////////////////////////////////////////////////////////////
    // I2C -- Slave #3
@@ -435,7 +535,6 @@ module u2plus_core
 
    // /////////////////////////////////////////////////////////////////////////
    // GPIOs
-
    wire [31:0] gpio_readback;
 
    gpio_atr #(.BASE(SR_GPIO), .WIDTH(32))
@@ -515,6 +614,8 @@ module u2plus_core
 
     wire [31:0] sfc_debug;
     wire sfc_clear;
+
+    (* keep_hierarchy = "yes" *)
     settings_fifo_ctrl #(.PROT_DEST(3), .PROT_HDR(1)) sfc
     (
         .clock(dsp_clk), .reset(dsp_rst), .clear(sfc_clear),
@@ -764,8 +865,14 @@ module u2plus_core
    // /////////////////////////////////////////////////////////////////////////////////////////
    // Debug Pins
 
+`ifdef CHIRP
+   assign debug_clk = {dsp_clk, clk_to_mac};
+   assign debug = {18'd0, vco_init_done, trigger, set_stb_user, run_rx0_d1, spi_chirp_debug[2:0],
+                   counter_mosi, counter_sclk, counter_sen, mosi, sclk, sen_rx_db, sen_tx_dac};
+`else
    assign debug_clk = 2'b00; // {dsp_clk, clk_to_mac};
    assign debug = 32'd0;
+`endif
    assign debug_gpio_0 = 32'd0;
    assign debug_gpio_1 = 32'd0;
 
-- 
2.17.1

